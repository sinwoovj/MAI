# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vito_stt_client_pb2 as vito__stt__client__pb2


class OnlineDecoderStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Decode = channel.stream_stream(
                '/online_decoder.OnlineDecoder/Decode',
                request_serializer=vito__stt__client__pb2.DecoderRequest.SerializeToString,
                response_deserializer=vito__stt__client__pb2.DecoderResponse.FromString,
                )


class OnlineDecoderServicer(object):
    """The greeting service definition.
    """

    def Decode(self, request_iterator, context):
        """Sends multiple greetings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OnlineDecoderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Decode': grpc.stream_stream_rpc_method_handler(
                    servicer.Decode,
                    request_deserializer=vito__stt__client__pb2.DecoderRequest.FromString,
                    response_serializer=vito__stt__client__pb2.DecoderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'online_decoder.OnlineDecoder', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OnlineDecoder(object):
    """The greeting service definition.
    """

    @staticmethod
    def Decode(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/online_decoder.OnlineDecoder/Decode',
            vito__stt__client__pb2.DecoderRequest.SerializeToString,
            vito__stt__client__pb2.DecoderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
